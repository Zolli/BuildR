<?xml version="1.0" encoding="UTF-8"?>
<project name="buildr" default="build">

    <property name="version" value="0.1.0" />

    <!-- By default, we assume all tools to be on the $PATH -->
    <!-- <property name="toolsdir" value=""/> -->

    <!-- Uncomment if you use composer for build tool downloading -->
    <property name="toolsdir" value="${basedir}/vendor/bin/"/>

    <!-- Set buildId passed by phabricator, harbormaster application -->
    <property name="buildId" value="${harbormaster_build_id}" />
    <property name="vcsType" value="${harbormaster_vcs_type}" />

    <!-- Where ant and other tools store output files -->
    <property name="buildOutputPath" value="${basedir}/build/output" />

    <echo message="Started building ${ant.project.name}! Build ID on phabricator: ${buildId}" level="info" />

    <!-- Target for default build configuration -->
    <target name="build"
            depends="prepare,composer,lint,phpunit,phpcpd,phploc,cs-fix,documentation,artifact"
            description=""/>

    <!-- Clean all previous build in workspace -->
    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">

        <echo message="Cleaning out build output directories" level="info" />

        <delete quiet="true" file="${basedir}/composer.lock"/>
        <delete quiet="true" dir="${basedir}/vendor"/>
        <delete quiet="true" dir="${buildOutputPath}"/>
        <property name="clean.done" value="true"/>

        <echo message="Finished cleaning output directories with result: ${clean.done}" level="info" />
    </target>

    <!-- Make all output sub directory for tools -->
    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">

        <echo message="Make sub directories for build" level="info" />

        <mkdir dir="${buildOutputPath}/logs" />
        <mkdir dir="${buildOutputPath}/coverage" />
        <mkdir dir="${buildOutputPath}/release" />
        <mkdir dir="${buildOutputPath}/doc" />
        <property name="prepare.done" value="true" />

        <echo message="Finished making sub directories with result: ${prepare.done}" />
    </target>

    <!-- Install composer dependencies and generating autoloader -->
    <target name="composer"
            description="Installing dependencies and generating autoloader">

        <echo message="Start dependency installing using composer" level="info" />

        <condition property="composer.command" value="update" else="install">
            <available file="${basedir}/composer.lock"/>
        </condition>

        <exec executable="composer">
            <arg value="${composer.command}" />
            <arg value="--no-interaction" />
            <arg value="--optimize-autoloader" />
            <arg value="--dev" />
        </exec>

        <echo message="Finished installing dependencies" level="info" />
    </target>

    <!-- Linting PHP syntax using PHP build-in parser -->
    <target name="lint" description="Perform syntax check of sourcecode files">

        <echo message="Run syntax checking on source and tests" level="info" />

        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>

        <echo message="Finished PHP syntax checking" level="info" />
    </target>

    <!-- Unit testing -->
    <target name="phpunit"
            depends="prepare"
            description="Run unit tests with PHPUnit">

        <echo message="Started unit testing using PHPUnit" level="info" />

        <exec executable="${toolsdir}phpunit" failonerror="true">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit-ci.xml"/>
        </exec>

        <echo message="Finished unit testing" level="info" />
    </target>

    <!-- Duplicated code finding -->
    <target name="phpcpd"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcpd">
            <arg value="--log-pmd" />
            <arg path="${buildOutputPath}/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <!-- Project size measurement -->
    <target name="phploc"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${buildOutputPath}/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${buildOutputPath}/logs/phploc.xml" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <!-- PSR-2 coding standart optimalization. Just for release only. We replace it with own coding standard later on -->
    <target name="cs-fix" depends="phpunit" description="Optimizing coding standard for PSR-2">
        <echo message="Fixing condig standard to compatible with PSR-2" level="info" />

        <exec executable="php-cs-fixer" failonerror="false">
            <arg value="fix" />
            <arg path="${basedir}/src/" />
            <arg value="--level=psr2" />
        </exec>

        <echo message="Finished CS fixing" level="info" />
    </target>

    <!-- Documentation generation -->
    <target name="documentation" description="Generate documentation for this build">
        <exec executable="apigen">
            <arg value="generate" />
            <arg value="--source" />
            <arg path="${basedir}/src/" />
            <arg value="--destination" />
            <arg path="${buildOutputPath}/doc" />
            <arg value="--deprecated" />
            <arg value="--todo" />
            <arg value="--tree" />
            <arg value="--template-theme=bootstrap" />
        </exec>
    </target>

    <!-- Artifact creation -->
    <target name="artifact" depends="cs-fix" description="Archive current build as artifact">
        <echo message="Started archiving current release" level="info" />

        <zip destfile="${buildOutputPath}/release/${ant.project.name}-${version}.${harbormaster_vcs_type}-${harbormaster_build_id}.zip"
             basedir="."
             excludes="**/vendor/**,**/build/**,**/cache.properties"
                />

        <zip destfile="${buildOutputPath}/release/${ant.project.name}-doc-${version}.${harbormaster_vcs_type}-${harbormaster_build_id}.zip"
             basedir="${buildOutputPath}/doc"
                />

        <echo message="Finished release artifact creation!" level="info" />
    </target>

</project>